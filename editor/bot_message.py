from abc import ABC, abstractmethod
import random
import string
# TODO: –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤


class Message(ABC):
    """–ö–ª–∞—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è."""
    SEND_IMMEDIATELY = 0  # –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –∑–∞ —Ç–µ–∫—É—â–∏–º
    def __init__(self, content):
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, –∞—É–¥–∏–æ, –∫–Ω–æ–ø–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
        """
        self.content = content
        self.transitions = []  # —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                               # –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å–ª–æ–≤–∏—è

    def add_next(self, next_message, requiered_callback=SEND_IMMEDIATELY, is_keyword=False):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        next_message: —Å–æ–æ–±—â–µ–Ω–∏–µ Message, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏
        requiered_callback: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç –∏–≥—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—å 
                            –≥–æ–ª–æ—Å–∞) –ª–∏–±–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ SEND_IMMEDIATELY - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç 
                            –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –∑–∞ —Ç–µ–∫—É—â–∏–º, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—è —É—Å–ª–æ–≤–∏–π
        is_keyword: –µ—Å–ª–∏ True, —Ç–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä requiered_callback –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ,
                    –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏; –∏–Ω–∞—á–µ - –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º
                    –≤ required_callback
        """
        def transition(received):
            if requiered_callback == self.SEND_IMMEDIATELY:
                # —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –∑–∞ —Ç–µ–∫—É—â–∏–º
                return next_message
            if received is None:
                # –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ - –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
                return None
            if is_keyword:
                # —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç
                # –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                pass  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
            if received.lower() == requiered_callback.lower():
                # –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–ø–∞–ª–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º
                return next_message
        self.transitions.append(transition)

    def get_next(self, received=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        received: –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –ª–∏–±–æ –≥–æ–ª–æ—Å). –ï—Å–ª–∏ None,
                  –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
                  –±–µ–∑ —É—Å–ª–æ–≤–∏—è
        """
        for transition in self.transitions:
            next_message = transition(received)
            if not next_message is None:
                return next_message


class TextMessage(Message):
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    def __init__(self, text):
        Message.__init__(self, text)


class ImageMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π."""
    def __init__(self, file_path):
        Message.__init__(self, open(file_path, 'rb'))


class VideoMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ."""
    def __init__(self, file_path):
        Message.__init__(self, open(file_path, 'rb'))


class VoiceMessage(Message):  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç ogg
    """–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    def __init__(self, file_path):
        Message.__init__(self, open(file_path, 'rb'))
        self.text = self.get_text()

    def get_text(self):
        """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        pass  # TODO: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏


class GifMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å gif-–∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    def __init__(self, file_path):
        Message.__init__(self, open(file_path, 'rb'))


class ModelMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å 3D-–º–æ–¥–µ–ª—å—é."""
    def __init__(self, file_path):
        Message.__init__(self, self.get_html_markup(file_path))

    def get_html_markup(self, file_path):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É html-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å 3D-–º–æ–¥–µ–ª—å—é."""
        pass  # TODO: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è html-—Ä–∞–∑–º–µ—Ç–∫–∏


class DocMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º)."""
    def __init__(self, file_path):
        # TODO: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        Message.__init__(self, open(file_path, 'rb'))


class AudioMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é."""
    def __init__(self, file_path):
        Message.__init__(self, open(file_path, 'rb'))


class StickerMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π-—Å—Ç–∏–∫–µ—Ä–æ–º."""
    def __init__(self, file_path):
        Message.__init__(self, open(file_path, 'rb'))


class ButtonsMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫."""
    def __init__(self, caption, buttons):
        """–°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ–¥–ø–∏—Å—å—é.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        buttons - –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ Button
        caption - —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        """
        Message.__init__(self, buttons)
        self.caption = caption

    def add_next(self, next_message, requiered_button):
        def transition(callback_data):
            if callback_data == requiered_button.callback_data:
                # —É–¥–∞–ª—è–µ–º —Å –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏
                del self.content[self.content.index(requiered_button)]
                return next_message
        self.transitions.append(transition)


class Button:
    """–ö–Ω–æ–ø–∫–∞."""
    def __init__(self, text):
        """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        text - —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ.
        """
        self.text = text
        self.callback_data = self.generate_callback_data()  # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏

    def generate_callback_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏."""
        return ''.join(random.choices(string.ascii_lowercase, k=10))


class GroupMessage(Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ –∏ (–∏–ª–∏) —Ç–µ–∫—Å—Ç."""
    def __init__(self, messages):
        """–°–æ–∑–¥–∞—ë—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        messages - —Å–æ–æ–±—â–µ–Ω–∏—è Message, –≤—Ö–æ–¥—è—â–∏–µ –≤ —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã.
        """
        Message.__init__(self, messages)


def get_sample_script():  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
    gray_btn = Button('—Å–µ—Ä–µ–Ω—å–∫–∏–π')
    pink_btn = Button('—Ä–æ–∑–æ–≤—ã–π')
    green_btn = Button('–∑–µ–ª—ë–Ω—ã–π')

    mes1 = ButtonsMessage('–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –±–µ–≥–µ–º–æ—Ç?', [gray_btn, pink_btn, green_btn])

    mes2 = TextMessage('–ù—É —á—Ç–æ –≤—ã, –Ω–µ—Ç –∫–æ–Ω–µ—á–Ω–æ')
    mes3 = TextMessage('–¢–∞–∫ —Ç–æ–ª—å–∫–æ –≤ –º—É–ª—å—Ç–∏–∫–∞—Ö –±—ã–≤–∞–µ—Ç üòä')
    # mes4 = GifMessage('success.gif')  # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    # mes4 = GifMessage('face.mp4')  # –¥–æ–ª–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    mes4 = TextMessage('–í—Å—ë.')
    mes5 = DocMessage('–¥–æ–∫.docx')

    mes1.add_next(next_message=mes3, requiered_button=pink_btn)
    mes1.add_next(next_message=mes4, requiered_button=gray_btn)
    mes1.add_next(next_message=mes2, requiered_button=green_btn)

    mes2.add_next(next_message=mes5)
    mes3.add_next(next_message=mes1)
    mes5.add_next(next_message=mes1)

    return mes1
